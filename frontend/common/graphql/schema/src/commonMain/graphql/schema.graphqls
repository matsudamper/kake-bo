input AddCategoryInput {
  name: String!
}

type AddCategoryResult {
  category: MoneyUsageCategory
}

input AddImportedMailCategoryFilterConditionInput {
  id: ImportedMailCategoryFilterId!

  text: String

  dataSourceType: ImportedMailCategoryFilterDataSourceType

  conditionType: ImportedMailCategoryFilterConditionType
}

input AddImportedMailCategoryFilterInput {
  title: String!
}

enum AddSubCategoryError {
  CATEGORY_NOT_FOUND
}

input AddSubCategoryInput {
  name: String!

  categoryId: MoneyUsageCategoryId!
}

type AddSubCategoryResult {
  subCategory: MoneyUsageSubCategory

  error: AddSubCategoryError
}

input AddUsageQuery {
  title: String!

  description: String!

  subCategoryId: MoneyUsageSubCategoryId

  amount: Int!

  date: LocalDateTime!

  importedMailId: ImportedMailId
}

enum AdminAddUserErrorType {
  Unknown

  UserNameAlreadyExists

  UserNameLength

  UserNameInvalidChar

  PasswordLength

  PasswordInvalidChar
}

type AdminAddUserResult {
  errorType: [AdminAddUserErrorType!]!
}

type AdminLoginResult {
  isSuccess: Boolean!
}

type AdminMutation {
  adminLogin(password: String!): AdminLoginResult!

  addUser(name: String!, password: String!): AdminAddUserResult!
}

type ApiToken {
  id: ApiTokenId!

  name: String!

  expiresAt: OffsetDateTime
}

type ApiTokenAttributes {
  apiTokens: [ApiToken!]!
}

scalar ApiTokenId

type ChangeSessionNameResult {
  isSuccess: Boolean!

  session: Session
}

type DeleteApiTokenResult {
  isSuccess: Boolean!
}

type DeleteFidoResult {
  isSuccess: Boolean!
}

type DeleteMailResult {
  error: DeleteMailResultError

  isSuccess: Boolean!
}

enum DeleteMailResultError {
  InternalServerError

  MailConfigNotFound

  MailServerNotConnected
}

type DeleteSessionResult {
  isSuccess: Boolean!
}

type FidoAddInfo {
  id: String!

  name: String!

  challenge: String!

  domain: String!
}

scalar FidoId

type FidoLoginInfo {
  challenge: String!

  domain: String!
}

type ImportMailResult {
  isSuccess: Boolean!
}

type ImportedMail {
  id: ImportedMailId!

  subject: String!

  from: String!

  plain: String

  hasPlain: Boolean!

  html: String

  hasHtml: Boolean!

  dateTime: LocalDateTime!

  forwardedInfo: ImportedMailForwardedInfo

  suggestUsages: [MoneyUsageSuggest!]!

  usages: [MoneyUsage!]!
}

type ImportedMailAttributes {
  count(query: ImportedMailQueryFilter!): Int

  mails(query: ImportedMailQuery!): ImportedMailConnection!

  mail(id: ImportedMailId!): ImportedMail
}

type ImportedMailCategoryCondition {
  id: ImportedMailCategoryFilterConditionId!

  text: String!

  dataSourceType: ImportedMailCategoryFilterDataSourceType!

  conditionType: ImportedMailCategoryFilterConditionType!
}

type ImportedMailCategoryFilter {
  id: ImportedMailCategoryFilterId!

  title: String!

  subCategory: MoneyUsageSubCategory

  orderNumber: Int!

  operator: ImportedMailFilterCategoryConditionOperator!

  conditions: [ImportedMailCategoryCondition!]
}

scalar ImportedMailCategoryFilterConditionId

enum ImportedMailCategoryFilterConditionType {
  Include

  NotInclude

  Equal

  NotEqual
}

enum ImportedMailCategoryFilterDataSourceType {
  MailTitle

  MailFrom

  MailHtml

  MailPlain

  Title

  ServiceName
}

scalar ImportedMailCategoryFilterId

type ImportedMailCategoryFiltersConnection {
  nodes: [ImportedMailCategoryFilter!]!

  cursor: String

  isLast: Boolean!
}

input ImportedMailCategoryFiltersQuery {
  isAsc: Boolean!

  cursor: String
}

type ImportedMailConnection {
  cursor: String

  nodes: [ImportedMail!]!
}

enum ImportedMailFilterCategoryConditionOperator {
  OR

  AND
}

type ImportedMailForwardedInfo {
  from: String!

  subject: String!

  dateTime: LocalDateTime!
}

scalar ImportedMailId

input ImportedMailQuery {
  size: Int!

  cursor: String

  sortedBy: ImportedMailSortKey!

  isAsc: Boolean!

  filter: ImportedMailQueryFilter!
}

input ImportedMailQueryFilter {
  isLinked: Boolean
}

enum ImportedMailSortKey {
  CREATED_DATETIME

  DATETIME
}

scalar LocalDateTime

"""
A 64-bit signed integer
"""
scalar Long

scalar MailId

input MailQuery {
  size: Int!

  cursor: String
}

type MoneyUsage {
  id: MoneyUsageId!

  title: String!

  description: String!

  date: LocalDateTime!

  amount: Int!

  linkedMail: [ImportedMail!]

  moneyUsageSubCategory: MoneyUsageSubCategory
}

type MoneyUsageAnalytics {
  totalAmount: Long

  byCategories: [MoneyUsageAnalyticsByCategory!]
}

type MoneyUsageAnalyticsByCategory {
  category: MoneyUsageCategory!

  bySubCategories: [MoneyUsageAnalyticsBySubCategory!]

  totalAmount: Long
}

type MoneyUsageAnalyticsBySubCategory {
  subCategory: MoneyUsageSubCategory!

  totalAmount: Long
}

input MoneyUsageAnalyticsQuery {
  sinceDateTime: LocalDateTime!

  untilDateTime: LocalDateTime!
}

type MoneyUsageCategoriesConnection {
  nodes: [MoneyUsageCategory!]!

  cursor: String
}

input MoneyUsageCategoriesInput {
  size: Int!

  cursor: String
}

type MoneyUsageCategory {
  id: MoneyUsageCategoryId!

  name: String!

  subCategories(query: MoneyUsageSubCategoryQuery!): SubCategoriesConnection
}

scalar MoneyUsageCategoryId

scalar MoneyUsageId

type MoneyUsageSubCategory {
  id: MoneyUsageSubCategoryId!

  name: String!

  category: MoneyUsageCategory!
}

scalar MoneyUsageSubCategoryId

input MoneyUsageSubCategoryInput {
  id: MoneyUsageSubCategoryId!
}

input MoneyUsageSubCategoryQuery {
  size: Int!

  cursor: String
}

type MoneyUsageSuggest {
  title: String!

  description: String!

  dateTime: LocalDateTime

  amount: Int

  subCategory: MoneyUsageSubCategory

  serviceName: String
}

type MoneyUsagesConnection {
  nodes: [MoneyUsage!]!

  cursor: String

  hasMore: Boolean!
}

input MoneyUsagesQuery {
  size: Int!

  cursor: String

  isAsc: Boolean!

  filter: MoneyUsagesQueryFilter

  orderType: MoneyUsagesQueryOrderType
}

input MoneyUsagesQueryFilter {
  category: [MoneyUsageCategoryId!]

  subCategory: [MoneyUsageSubCategoryId!]

  text: String

  sinceDateTime: LocalDateTime

  untilDateTime: LocalDateTime
}

enum MoneyUsagesQueryOrderType {
  DATE

  AMOUNT
}

type Mutation {
  adminMutation: AdminMutation!

  userMutation: UserMutation!
}

"""
A slightly refined version of RFC-3339 compliant DateTime Scalar
"""
scalar OffsetDateTime

type Query {
  isLoggedIn: Boolean!

  user: User

  fidoLoginInfo: FidoLoginInfo!
}

type RegisterApiTokenResult {
  isSuccess: Boolean!

  apiToken: String
}

input RegisterFidoInput {
  displayName: String!

  challenge: String!

  base64AttestationObject: String!

  base64ClientDataJson: String!
}

type RegisteredFidoInfo {
  id: FidoId!

  name: String!

  base64CredentialId: String!
}

type RegisteredFidoResult {
  fidoInfo: RegisteredFidoInfo
}

type Session {
  name: String!

  lastAccess: OffsetDateTime!
}

type SessionAttributes {
  currentSession: Session!

  sessions: [Session!]!
}

type SettingsMutation {
  updateImapConfig(config: UpdateUserImapConfigInput!): UserImapConfig
}

type SubCategoriesConnection {
  nodes: [MoneyUsageSubCategory!]!

  cursor: String
}

input UpdateCategoryQuery {
  name: String
}

input UpdateImportedMailCategoryFilterConditionInput {
  id: ImportedMailCategoryFilterConditionId!

  text: String

  dataSourceType: ImportedMailCategoryFilterDataSourceType

  conditionType: ImportedMailCategoryFilterConditionType
}

input UpdateImportedMailCategoryFilterInput {
  id: ImportedMailCategoryFilterId!

  title: String

  subCategoryId: MoneyUsageSubCategoryId

  orderNumber: Int

  operator: ImportedMailFilterCategoryConditionOperator
}

input UpdateSubCategoryQuery {
  name: String
}

input UpdateUsageQuery {
  id: MoneyUsageId!

  title: String

  date: LocalDateTime

  amount: Int

  description: String

  subCategoryId: MoneyUsageSubCategoryId
}

input UpdateUserImapConfigInput {
  host: String

  port: Int

  userName: String

  password: String
}

type User {
  settings: UserSettings!

  userMailAttributes: UserMailAttributes!

  importedMailAttributes: ImportedMailAttributes!

  moneyUsage(id: MoneyUsageId!): MoneyUsage

  moneyUsageAnalytics(query: MoneyUsageAnalyticsQuery!): MoneyUsageAnalytics!

  moneyUsageAnalyticsByCategory(id: MoneyUsageCategoryId!, query: MoneyUsageAnalyticsQuery!): MoneyUsageAnalyticsByCategory

  moneyUsageCategories(input: MoneyUsageCategoriesInput!): MoneyUsageCategoriesConnection

  moneyUsageCategory(id: MoneyUsageCategoryId!): MoneyUsageCategory

  moneyUsageSubCategory(input: MoneyUsageSubCategoryInput!): MoneyUsageSubCategory

  moneyUsages(query: MoneyUsagesQuery!): MoneyUsagesConnection

  importedMailCategoryFilters(query: ImportedMailCategoryFiltersQuery!): ImportedMailCategoryFiltersConnection

  importedMailCategoryFilter(id: ImportedMailCategoryFilterId!): ImportedMailCategoryFilter
}

input UserFidoLoginInput {
  credentialId: String!

  userName: String!

  challenge: String!

  base64AuthenticatorData: String!

  base64Signature: String!

  base64ClientDataJson: String!

  base64UserHandle: String!
}

type UserImapConfig {
  host: String

  port: Int

  userName: String

  hasPassword: Boolean
}

type UserLoginResult {
  isSuccess: Boolean!
}

type UserMail {
  id: MailId!

  subject: String!

  from: [String!]!

  sender: String

  plain: String

  html: String

  time: OffsetDateTime!
}

type UserMailAttributes {
  mailCount: Int

  mails(mailQuery: MailQuery!): UserMailConnection!
}

type UserMailConnection {
  error: UserMailError

  usrMails: [UserMail!]!

  cursor: String
}

enum UserMailError {
  InternalServerError

  MailConfigNotFound

  MailServerNotConnected
}

type UserMutation {
  userLogin(name: String!, password: String!): UserLoginResult!

  userFidoLogin(userFidoLoginInput: UserFidoLoginInput!): UserLoginResult!

  settingsMutation: SettingsMutation

  logout: Boolean!

  importMail(mailIds: [MailId!]!): ImportMailResult!

  deleteImportedMail(id: ImportedMailId!): Boolean!

  deleteMail(mailIds: [MailId!]!): DeleteMailResult!

  addUsage(usage: AddUsageQuery!): MoneyUsage!

  updateUsage(query: UpdateUsageQuery!): MoneyUsage!

  deleteUsage(id: MoneyUsageId!): Boolean!

  addCategory(input: AddCategoryInput!): AddCategoryResult!

  updateCategory(id: MoneyUsageCategoryId!, query: UpdateCategoryQuery!): MoneyUsageCategory!

  addSubCategory(input: AddSubCategoryInput!): AddSubCategoryResult!

  updateSubCategory(id: MoneyUsageSubCategoryId!, query: UpdateSubCategoryQuery!): MoneyUsageSubCategory!

  deleteSubCategory(id: MoneyUsageSubCategoryId!): Boolean!

  addImportedMailCategoryFilter(input: AddImportedMailCategoryFilterInput!): ImportedMailCategoryFilter

  updateImportedMailCategoryFilter(input: UpdateImportedMailCategoryFilterInput!): ImportedMailCategoryFilter

  deleteImportedMailCategoryFilter(id: ImportedMailCategoryFilterId!): Boolean!

  addImportedMailCategoryFilterCondition(input: AddImportedMailCategoryFilterConditionInput!): ImportedMailCategoryFilter

  updateImportedMailCategoryFilterCondition(input: UpdateImportedMailCategoryFilterConditionInput!): ImportedMailCategoryCondition

  deleteImportedMailCategoryFilterCondition(id: ImportedMailCategoryFilterConditionId!): Boolean!

  registerFido(input: RegisterFidoInput!): RegisteredFidoResult!

  deleteFido(id: FidoId!): DeleteFidoResult!

  deleteSession(name: String!): DeleteSessionResult!

  changeSessionName(name: String!): ChangeSessionNameResult!

  registerApiToken(name: String!): RegisterApiTokenResult!

  deleteApiToken(id: ApiTokenId!): DeleteApiTokenResult!
}

type UserSettings {
  imapConfig: UserImapConfig

  fidoAddInfo: FidoAddInfo!

  registeredFidoList: [RegisteredFidoInfo!]!

  sessionAttributes: SessionAttributes!

  apiTokenAttributes: ApiTokenAttributes!
}

type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  """
  This field is considered experimental because it has not yet been ratified in the graphql specification
  """
  isOneOf: Boolean

  specifiedByURL: String

  specifiedByUrl: String @deprecated(reason: "This legacy name has been replaced by `specifiedByURL`")
}

"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByURL' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

directive @lazy on FIELD_DEFINITION

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String! = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

"""
Indicates an Input Object is a OneOf Input Object.
"""
directive @oneOf on INPUT_OBJECT

"""
This directive allows results to be deferred during execution
"""
directive @defer ("Deferred behaviour is controlled by this argument" if: Boolean! = true, "A unique label that represents the fragment being deferred" label: String) on FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
This directive disables error propagation when a non nullable field returns null for the given operation.
"""
directive @experimental_disableErrorPropagation on QUERY|MUTATION|SUBSCRIPTION

schema {
  query: Query
  mutation: Mutation
}
