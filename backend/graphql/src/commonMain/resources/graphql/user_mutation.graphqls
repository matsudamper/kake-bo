type UserMutation {
    userLogin(name: String!, password: String!): UserLoginResult!
    userFidoLogin(userFidoLoginInput: UserFidoLoginInput!): UserLoginResult!
    settingsMutation: SettingsMutation @lazy
    logout: Boolean! @lazy

    importMail(mailIds: [MailId!]!): ImportMailResult!
    deleteImportedMail(id: ImportedMailId!): Boolean!
    deleteMail(mailIds: [MailId!]!): DeleteMailResult!

    addUsage(usage: AddUsageQuery!): MoneyUsage!
    updateUsage(query: UpdateUsageQuery!): MoneyUsage!
    deleteUsage(id: MoneyUsageId!): Boolean!

    addCategory(input: AddCategoryInput!) : AddCategoryResult!
    updateCategory(id: MoneyUsageCategoryId!, query: UpdateCategoryQuery!): MoneyUsageCategory!

    addSubCategory(input: AddSubCategoryInput!) : AddSubCategoryResult!
    updateSubCategory(id: MoneyUsageSubCategoryId!, query: UpdateSubCategoryQuery!): MoneyUsageSubCategory!
    deleteSubCategory(id: MoneyUsageSubCategoryId!): Boolean!

    addImportedMailCategoryFilter(input: AddImportedMailCategoryFilterInput!): ImportedMailCategoryFilter
    updateImportedMailCategoryFilter(input: UpdateImportedMailCategoryFilterInput!): ImportedMailCategoryFilter
    deleteImportedMailCategoryFilter(id: ImportedMailCategoryFilterId!): Boolean!

    addImportedMailCategoryFilterCondition(input: AddImportedMailCategoryFilterConditionInput!): ImportedMailCategoryFilter
    updateImportedMailCategoryFilterCondition(input: UpdateImportedMailCategoryFilterConditionInput!): ImportedMailCategoryCondition
    deleteImportedMailCategoryFilterCondition(id: ImportedMailCategoryFilterConditionId!): Boolean!

    registerFido(input: RegisterFidoInput!): RegisteredFidoResult!
    deleteFido(id: FidoId!): DeleteFidoResult!
    deleteSession(name: String!): DeleteSessionResult!
    changeSessionName(name: String!): ChangeSessionNameResult!
}

type ChangeSessionNameResult {
    isSuccess: Boolean!
    session: Session
}

type DeleteSessionResult {
    isSuccess: Boolean!
}

type DeleteFidoResult {
    isSuccess: Boolean!
}

type RegisteredFidoResult {
    fidoInfo: RegisteredFidoInfo
}

input UserFidoLoginInput {
    credentialId: String!
    userName: String!
    challenge: String!
    base64AuthenticatorData: String!
    base64Signature: String!
    base64ClientDataJson: String!
    base64UserHandle: String!
}

input RegisterFidoInput {
    displayName: String!
    challenge: String!
    base64AttestationObject: String!
    base64ClientDataJson: String!
}

input UpdateUsageQuery {
    id: MoneyUsageId!
    title: String
    date: LocalDateTime
    amount: Int
    description: String
    subCategoryId: MoneyUsageSubCategoryId
}

input UpdateImportedMailCategoryFilterConditionInput {
    id: ImportedMailCategoryFilterConditionId!

    text: String
    dataSourceType: ImportedMailCategoryFilterDataSourceType
    conditionType: ImportedMailCategoryFilterConditionType
}

input AddImportedMailCategoryFilterConditionInput {
    id: ImportedMailCategoryFilterId!

    text: String
    dataSourceType: ImportedMailCategoryFilterDataSourceType
    conditionType: ImportedMailCategoryFilterConditionType
}

input AddImportedMailCategoryFilterInput {
    title: String!
}

input UpdateImportedMailCategoryFilterInput {
    id: ImportedMailCategoryFilterId!

    title: String
    subCategoryId: MoneyUsageSubCategoryId
    orderNumber: Int
    operator: ImportedMailFilterCategoryConditionOperator
}

input UpdateSubCategoryQuery {
    name: String
}

input UpdateCategoryQuery {
    name: String
}

input AddSubCategoryInput {
    name: String!
    categoryId: MoneyUsageCategoryId!
}
type AddSubCategoryResult {
    subCategory: MoneyUsageSubCategory
    error: AddSubCategoryError
}
enum AddSubCategoryError {
    CATEGORY_NOT_FOUND,
}

input AddCategoryInput {
    name: String!
}

type AddCategoryResult {
    category: MoneyUsageCategory
}

input AddUsageQuery {
    title: String!
    description: String!
    subCategoryId: MoneyUsageSubCategoryId
    amount: Int!
    date: LocalDateTime!
    importedMailId: ImportedMailId
}

type DeleteMailResult {
    error: DeleteMailResultError
    isSuccess: Boolean!
}

enum DeleteMailResultError {
    InternalServerError,
    MailConfigNotFound,
    MailServerNotConnected,
}

type ImportMailResult {
    isSuccess: Boolean!
}

type UserLoginResult {
    isSuccess: Boolean!
}

type SettingsMutation {
    updateImapConfig(config: UpdateUserImapConfigInput!) : UserImapConfig
}

input UpdateUserImapConfigInput {
    host: String
    port: Int
    userName: String
    password: String
}
