type User {
    settings: UserSettings! @lazy
    userMailAttributes: UserMailAttributes!
    importedMailAttributes: ImportedMailAttributes!
    moneyUsage(id: MoneyUsageId!): MoneyUsage @lazy
    moneyUsageAnalytics(query: MoneyUsageAnalyticsQuery!): MoneyUsageAnalytics! @lazy
    moneyUsageAnalyticsByCategory(id: MoneyUsageCategoryId!, query: MoneyUsageAnalyticsQuery!): MoneyUsageAnalyticsByCategory @lazy
    moneyUsageCategories(input: MoneyUsageCategoriesInput!):MoneyUsageCategoriesConnection @lazy
    moneyUsageCategory(id: MoneyUsageCategoryId!): MoneyUsageCategory @lazy
    moneyUsageSubCategory(input: MoneyUsageSubCategoryInput!): MoneyUsageSubCategory @lazy
    moneyUsages(query: MoneyUsagesQuery!): MoneyUsagesConnection @lazy
    importedMailCategoryFilters(query: ImportedMailCategoryFiltersQuery!): ImportedMailCategoryFiltersConnection @lazy
    importedMailCategoryFilter(id: ImportedMailCategoryFilterId!): ImportedMailCategoryFilter @lazy
}

type MoneyUsagesConnection {
    nodes : [MoneyUsage!]!
    cursor: String
    hasMore: Boolean!
}

input MoneyUsagesQuery {
    size: Int!
    cursor: String
    isAsc: Boolean!
    filter: MoneyUsagesQueryFilter
    orderType: MoneyUsagesQueryOrderType
}

enum MoneyUsagesQueryOrderType {
    DATE
    AMOUNT
}

input MoneyUsagesQueryFilter {
    category: [MoneyUsageCategoryId!]
    subCategory: [MoneyUsageSubCategoryId!]
    text: String
    sinceDateTime: LocalDateTime
    untilDateTime: LocalDateTime
}

input MoneyUsageCategoryInput {
    id: MoneyUsageCategoryId!
}

input MoneyUsageSubCategoryInput {
    id: MoneyUsageSubCategoryId!
}

input MoneyUsageCategoriesInput {
    size: Int!
    cursor: String
}

type MoneyUsageCategoriesConnection {
    nodes: [MoneyUsageCategory!]!
    cursor: String
}

type MoneyUsage {
    id: MoneyUsageId!
    title: String! @lazy
    description: String! @lazy
    date: LocalDateTime! @lazy
    amount: Int! @lazy

    linkedMail: [ImportedMail!] @lazy
    moneyUsageSubCategory: MoneyUsageSubCategory @lazy
}
