/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import net.matsudamper.money.db.schema.JMoney
import net.matsudamper.money.db.schema.indexes.MONEY_USAGES_USER_ID
import net.matsudamper.money.db.schema.indexes.MONEY_USAGES_USER_INDEX
import net.matsudamper.money.db.schema.keys.KEY_MONEY_USAGES_PRIMARY
import net.matsudamper.money.db.schema.tables.records.JMoneyUsagesRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row9
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JMoneyUsages(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JMoneyUsagesRecord>?,
    aliased: Table<JMoneyUsagesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JMoneyUsagesRecord>(
    alias,
    JMoney.MONEY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>money.money_usages</code>
         */
        val MONEY_USAGES: JMoneyUsages = JMoneyUsages()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JMoneyUsagesRecord> = JMoneyUsagesRecord::class.java

    /**
     * The column <code>money.money_usages.money_usage_id</code>.
     */
    val MONEY_USAGE_ID: TableField<JMoneyUsagesRecord, Int?> = createField(DSL.name("money_usage_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>money.money_usages.user_id</code>.
     */
    val USER_ID: TableField<JMoneyUsagesRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>money.money_usages.title</code>.
     */
    val TITLE: TableField<JMoneyUsagesRecord, String?> = createField(DSL.name("title"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column <code>money.money_usages.description</code>.
     */
    val DESCRIPTION: TableField<JMoneyUsagesRecord, String?> = createField(DSL.name("description"), SQLDataType.VARCHAR(1000).nullable(false), this, "")

    /**
     * The column <code>money.money_usages.money_usage_sub_category_id</code>.
     */
    val MONEY_USAGE_SUB_CATEGORY_ID: TableField<JMoneyUsagesRecord, Int?> = createField(DSL.name("money_usage_sub_category_id"), SQLDataType.INTEGER.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.INTEGER)), this, "")

    /**
     * The column <code>money.money_usages.datetime</code>.
     */
    val DATETIME: TableField<JMoneyUsagesRecord, LocalDateTime?> = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>money.money_usages.created_datetime</code>.
     */
    val CREATED_DATETIME: TableField<JMoneyUsagesRecord, LocalDateTime?> = createField(DSL.name("created_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>money.money_usages.update_datetime</code>.
     */
    val UPDATE_DATETIME: TableField<JMoneyUsagesRecord, LocalDateTime?> = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>money.money_usages.amount</code>.
     */
    val AMOUNT: TableField<JMoneyUsagesRecord, Int?> = createField(DSL.name("amount"), SQLDataType.INTEGER.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JMoneyUsagesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JMoneyUsagesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>money.money_usages</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>money.money_usages</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>money.money_usages</code> table reference
     */
    constructor(): this(DSL.name("money_usages"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JMoneyUsagesRecord>): this(Internal.createPathAlias(child, key), child, key, MONEY_USAGES, null)
    override fun getSchema(): Schema? = if (aliased()) null else JMoney.MONEY
    override fun getIndexes(): List<Index> = listOf(MONEY_USAGES_USER_ID, MONEY_USAGES_USER_INDEX)
    override fun getIdentity(): Identity<JMoneyUsagesRecord, Int?> = super.getIdentity() as Identity<JMoneyUsagesRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<JMoneyUsagesRecord> = KEY_MONEY_USAGES_PRIMARY
    override fun `as`(alias: String): JMoneyUsages = JMoneyUsages(DSL.name(alias), this)
    override fun `as`(alias: Name): JMoneyUsages = JMoneyUsages(alias, this)
    override fun `as`(alias: Table<*>): JMoneyUsages = JMoneyUsages(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JMoneyUsages = JMoneyUsages(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JMoneyUsages = JMoneyUsages(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JMoneyUsages = JMoneyUsages(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row9<Int?, Int?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?> = super.fieldsRow() as Row9<Int?, Int?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, String?, String?, Int?, LocalDateTime?, LocalDateTime?, LocalDateTime?, Int?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
