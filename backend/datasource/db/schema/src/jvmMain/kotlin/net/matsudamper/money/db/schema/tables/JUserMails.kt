/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables


import java.time.LocalDateTime

import kotlin.collections.Collection
import kotlin.collections.List

import net.matsudamper.money.db.schema.JMoney
import net.matsudamper.money.db.schema.indexes.USER_MAILS_USER_ID
import net.matsudamper.money.db.schema.indexes.USER_MAILS_USER_INDEX
import net.matsudamper.money.db.schema.keys.KEY_USER_MAILS_PRIMARY
import net.matsudamper.money.db.schema.tables.records.JUserMailsRecord

import org.jooq.Condition
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.InverseForeignKey
import org.jooq.Name
import org.jooq.PlainSQL
import org.jooq.QueryPart
import org.jooq.Record
import org.jooq.SQL
import org.jooq.Schema
import org.jooq.Select
import org.jooq.Stringly
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JUserMails(
    alias: Name,
    path: Table<out Record>?,
    childPath: ForeignKey<out Record, JUserMailsRecord>?,
    parentPath: InverseForeignKey<out Record, JUserMailsRecord>?,
    aliased: Table<JUserMailsRecord>?,
    parameters: Array<Field<*>?>?,
    where: Condition?
): TableImpl<JUserMailsRecord>(
    alias,
    JMoney.MONEY,
    path,
    childPath,
    parentPath,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table(),
    where,
) {
    companion object {

        /**
         * The reference instance of <code>money.user_mails</code>
         */
        val USER_MAILS: JUserMails = JUserMails()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JUserMailsRecord> = JUserMailsRecord::class.java

    /**
     * The column <code>money.user_mails.user_mail_id</code>.
     */
    val USER_MAIL_ID: TableField<JUserMailsRecord, Int?> = createField(DSL.name("user_mail_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column <code>money.user_mails.user_id</code>.
     */
    val USER_ID: TableField<JUserMailsRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>money.user_mails.plain</code>.
     */
    val PLAIN: TableField<JUserMailsRecord, String?> = createField(DSL.name("plain"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>money.user_mails.html</code>.
     */
    val HTML: TableField<JUserMailsRecord, String?> = createField(DSL.name("html"), SQLDataType.CLOB.defaultValue(DSL.field(DSL.raw("NULL"), SQLDataType.CLOB)), this, "")

    /**
     * The column <code>money.user_mails.datetime</code>.
     */
    val DATETIME: TableField<JUserMailsRecord, LocalDateTime?> = createField(DSL.name("datetime"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "")

    /**
     * The column <code>money.user_mails.created_datetime</code>.
     */
    val CREATED_DATETIME: TableField<JUserMailsRecord, LocalDateTime?> = createField(DSL.name("created_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column <code>money.user_mails.from_mail</code>.
     */
    val FROM_MAIL: TableField<JUserMailsRecord, String?> = createField(DSL.name("from_mail"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column <code>money.user_mails.subject</code>.
     */
    val SUBJECT: TableField<JUserMailsRecord, String?> = createField(DSL.name("subject"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JUserMailsRecord>?): this(alias, null, null, null, aliased, null, null)
    private constructor(alias: Name, aliased: Table<JUserMailsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, null, aliased, parameters, null)
    private constructor(alias: Name, aliased: Table<JUserMailsRecord>?, where: Condition?): this(alias, null, null, null, aliased, null, where)

    /**
     * Create an aliased <code>money.user_mails</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>money.user_mails</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>money.user_mails</code> table reference
     */
    constructor(): this(DSL.name("user_mails"), null)
    override fun getSchema(): Schema? = if (aliased()) null else JMoney.MONEY
    override fun getIndexes(): List<Index> = listOf(USER_MAILS_USER_ID, USER_MAILS_USER_INDEX)
    override fun getIdentity(): Identity<JUserMailsRecord, Int?> = super.getIdentity() as Identity<JUserMailsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<JUserMailsRecord> = KEY_USER_MAILS_PRIMARY
    override fun `as`(alias: String): JUserMails = JUserMails(DSL.name(alias), this)
    override fun `as`(alias: Name): JUserMails = JUserMails(alias, this)
    override fun `as`(alias: Table<*>): JUserMails = JUserMails(alias.qualifiedName, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JUserMails = JUserMails(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JUserMails = JUserMails(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JUserMails = JUserMails(name.qualifiedName, null)

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Condition?): JUserMails = JUserMails(qualifiedName, if (aliased()) this else null, condition)

    /**
     * Create an inline derived table from this table
     */
    override fun where(conditions: Collection<Condition>): JUserMails = where(DSL.and(conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(vararg conditions: Condition?): JUserMails = where(DSL.and(*conditions))

    /**
     * Create an inline derived table from this table
     */
    override fun where(condition: Field<Boolean?>?): JUserMails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(condition: SQL): JUserMails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String): JUserMails = where(DSL.condition(condition))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg binds: Any?): JUserMails = where(DSL.condition(condition, *binds))

    /**
     * Create an inline derived table from this table
     */
    @PlainSQL override fun where(@Stringly.SQL condition: String, vararg parts: QueryPart): JUserMails = where(DSL.condition(condition, *parts))

    /**
     * Create an inline derived table from this table
     */
    override fun whereExists(select: Select<*>): JUserMails = where(DSL.exists(select))

    /**
     * Create an inline derived table from this table
     */
    override fun whereNotExists(select: Select<*>): JUserMails = where(DSL.notExists(select))
}
