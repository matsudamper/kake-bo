/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import java.time.LocalDateTime

import net.matsudamper.money.db.schema.tables.JWebAuthAuthenticator

import org.jooq.Record1
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JWebAuthAuthenticatorRecord() : UpdatableRecordImpl<JWebAuthAuthenticatorRecord>(JWebAuthAuthenticator.WEB_AUTH_AUTHENTICATOR) {

    open var id: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var name: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var attestationStatement: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var attestationStatementFormat: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var attestedCredentialData: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var authenticatorExtensions: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var counter: Long?
        set(value): Unit = set(7, value)
        get(): Long? = get(7) as Long?

    open var createdAt: LocalDateTime?
        set(value): Unit = set(8, value)
        get(): LocalDateTime? = get(8) as LocalDateTime?

    open var updatedAt: LocalDateTime?
        set(value): Unit = set(9, value)
        get(): LocalDateTime? = get(9) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    /**
     * Create a detached, initialised JWebAuthAuthenticatorRecord
     */
    constructor(id: Int? = null, userId: Int? = null, name: String? = null, attestationStatement: String? = null, attestationStatementFormat: String? = null, attestedCredentialData: String? = null, authenticatorExtensions: String? = null, counter: Long? = null, createdAt: LocalDateTime? = null, updatedAt: LocalDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.name = name
        this.attestationStatement = attestationStatement
        this.attestationStatementFormat = attestationStatementFormat
        this.attestedCredentialData = attestedCredentialData
        this.authenticatorExtensions = authenticatorExtensions
        this.counter = counter
        this.createdAt = createdAt
        this.updatedAt = updatedAt
        resetChangedOnNotNull()
    }
}
