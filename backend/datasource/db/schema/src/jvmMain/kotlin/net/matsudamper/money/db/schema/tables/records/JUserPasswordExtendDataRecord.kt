/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import java.time.LocalDateTime

import net.matsudamper.money.db.schema.tables.JUserPasswordExtendData

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JUserPasswordExtendDataRecord() : UpdatableRecordImpl<JUserPasswordExtendDataRecord>(JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA), Record7<Int?, ByteArray?, Int?, String?, Int?, LocalDateTime?, LocalDateTime?> {

    open var userId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var salt: ByteArray?
        set(value): Unit = set(1, value)
        get(): ByteArray? = get(1) as ByteArray?

    open var iterationCount: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var algorithm: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var keyLength: Int?
        set(value): Unit = set(4, value)
        get(): Int? = get(4) as Int?

    open var createdDatetime: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    open var updateDatetime: LocalDateTime?
        set(value): Unit = set(6, value)
        get(): LocalDateTime? = get(6) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Int?, ByteArray?, Int?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row7<Int?, ByteArray?, Int?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row7<Int?, ByteArray?, Int?, String?, Int?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row7<Int?, ByteArray?, Int?, String?, Int?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.USER_ID
    override fun field2(): Field<ByteArray?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.SALT
    override fun field3(): Field<Int?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.ITERATION_COUNT
    override fun field4(): Field<String?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.ALGORITHM
    override fun field5(): Field<Int?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.KEY_LENGTH
    override fun field6(): Field<LocalDateTime?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.CREATED_DATETIME
    override fun field7(): Field<LocalDateTime?> = JUserPasswordExtendData.USER_PASSWORD_EXTEND_DATA.UPDATE_DATETIME
    override fun component1(): Int? = userId
    override fun component2(): ByteArray? = salt
    override fun component3(): Int? = iterationCount
    override fun component4(): String? = algorithm
    override fun component5(): Int? = keyLength
    override fun component6(): LocalDateTime? = createdDatetime
    override fun component7(): LocalDateTime? = updateDatetime
    override fun value1(): Int? = userId
    override fun value2(): ByteArray? = salt
    override fun value3(): Int? = iterationCount
    override fun value4(): String? = algorithm
    override fun value5(): Int? = keyLength
    override fun value6(): LocalDateTime? = createdDatetime
    override fun value7(): LocalDateTime? = updateDatetime

    override fun value1(value: Int?): JUserPasswordExtendDataRecord {
        set(0, value)
        return this
    }

    override fun value2(value: ByteArray?): JUserPasswordExtendDataRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): JUserPasswordExtendDataRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): JUserPasswordExtendDataRecord {
        set(3, value)
        return this
    }

    override fun value5(value: Int?): JUserPasswordExtendDataRecord {
        set(4, value)
        return this
    }

    override fun value6(value: LocalDateTime?): JUserPasswordExtendDataRecord {
        set(5, value)
        return this
    }

    override fun value7(value: LocalDateTime?): JUserPasswordExtendDataRecord {
        set(6, value)
        return this
    }

    override fun values(value1: Int?, value2: ByteArray?, value3: Int?, value4: String?, value5: Int?, value6: LocalDateTime?, value7: LocalDateTime?): JUserPasswordExtendDataRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised JUserPasswordExtendDataRecord
     */
    constructor(userId: Int? = null, salt: ByteArray? = null, iterationCount: Int? = null, algorithm: String? = null, keyLength: Int? = null, createdDatetime: LocalDateTime? = null, updateDatetime: LocalDateTime? = null): this() {
        this.userId = userId
        this.salt = salt
        this.iterationCount = iterationCount
        this.algorithm = algorithm
        this.keyLength = keyLength
        this.createdDatetime = createdDatetime
        this.updateDatetime = updateDatetime
        resetChangedOnNotNull()
    }
}
