/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import java.time.LocalDateTime

import net.matsudamper.money.db.schema.tables.JMoneyUsageSubCategories

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JMoneyUsageSubCategoriesRecord() : UpdatableRecordImpl<JMoneyUsageSubCategoriesRecord>(JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES), Record6<Int?, Int?, Int?, String?, LocalDateTime?, LocalDateTime?> {

    open var moneyUsageSubCategoryId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var userId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var moneyUsageCategoryId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var name: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var createdDatetime: LocalDateTime?
        set(value): Unit = set(4, value)
        get(): LocalDateTime? = get(4) as LocalDateTime?

    open var updateDatetime: LocalDateTime?
        set(value): Unit = set(5, value)
        get(): LocalDateTime? = get(5) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Int?, Int?, Int?, String?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row6<Int?, Int?, Int?, String?, LocalDateTime?, LocalDateTime?>
    override fun valuesRow(): Row6<Int?, Int?, Int?, String?, LocalDateTime?, LocalDateTime?> = super.valuesRow() as Row6<Int?, Int?, Int?, String?, LocalDateTime?, LocalDateTime?>
    override fun field1(): Field<Int?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.MONEY_USAGE_SUB_CATEGORY_ID
    override fun field2(): Field<Int?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.USER_ID
    override fun field3(): Field<Int?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.MONEY_USAGE_CATEGORY_ID
    override fun field4(): Field<String?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.NAME
    override fun field5(): Field<LocalDateTime?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.CREATED_DATETIME
    override fun field6(): Field<LocalDateTime?> = JMoneyUsageSubCategories.MONEY_USAGE_SUB_CATEGORIES.UPDATE_DATETIME
    override fun component1(): Int? = moneyUsageSubCategoryId
    override fun component2(): Int? = userId
    override fun component3(): Int? = moneyUsageCategoryId
    override fun component4(): String? = name
    override fun component5(): LocalDateTime? = createdDatetime
    override fun component6(): LocalDateTime? = updateDatetime
    override fun value1(): Int? = moneyUsageSubCategoryId
    override fun value2(): Int? = userId
    override fun value3(): Int? = moneyUsageCategoryId
    override fun value4(): String? = name
    override fun value5(): LocalDateTime? = createdDatetime
    override fun value6(): LocalDateTime? = updateDatetime

    override fun value1(value: Int?): JMoneyUsageSubCategoriesRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): JMoneyUsageSubCategoriesRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): JMoneyUsageSubCategoriesRecord {
        set(2, value)
        return this
    }

    override fun value4(value: String?): JMoneyUsageSubCategoriesRecord {
        set(3, value)
        return this
    }

    override fun value5(value: LocalDateTime?): JMoneyUsageSubCategoriesRecord {
        set(4, value)
        return this
    }

    override fun value6(value: LocalDateTime?): JMoneyUsageSubCategoriesRecord {
        set(5, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: String?, value5: LocalDateTime?, value6: LocalDateTime?): JMoneyUsageSubCategoriesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised JMoneyUsageSubCategoriesRecord
     */
    constructor(moneyUsageSubCategoryId: Int? = null, userId: Int? = null, moneyUsageCategoryId: Int? = null, name: String? = null, createdDatetime: LocalDateTime? = null, updateDatetime: LocalDateTime? = null): this() {
        this.moneyUsageSubCategoryId = moneyUsageSubCategoryId
        this.userId = userId
        this.moneyUsageCategoryId = moneyUsageCategoryId
        this.name = name
        this.createdDatetime = createdDatetime
        this.updateDatetime = updateDatetime
        resetChangedOnNotNull()
    }
}
