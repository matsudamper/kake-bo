/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import java.time.LocalDateTime

import net.matsudamper.money.db.schema.tables.JMoneyUsagesMailsRelation

import org.jooq.Record2
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JMoneyUsagesMailsRelationRecord() : UpdatableRecordImpl<JMoneyUsagesMailsRelationRecord>(JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION) {

    open var userId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var moneyUsageId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var userMailId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var createdDatetime: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    /**
     * Create a detached, initialised JMoneyUsagesMailsRelationRecord
     */
    constructor(userId: Int? = null, moneyUsageId: Int? = null, userMailId: Int? = null, createdDatetime: LocalDateTime? = null): this() {
        this.userId = userId
        this.moneyUsageId = moneyUsageId
        this.userMailId = userMailId
        this.createdDatetime = createdDatetime
        resetChangedOnNotNull()
    }
}
