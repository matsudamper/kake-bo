/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import java.time.LocalDateTime

import net.matsudamper.money.db.schema.tables.JMoneyUsagesMailsRelation

import org.jooq.Field
import org.jooq.Record2
import org.jooq.Record4
import org.jooq.Row4
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JMoneyUsagesMailsRelationRecord() : UpdatableRecordImpl<JMoneyUsagesMailsRelationRecord>(JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION), Record4<Int?, Int?, Int?, LocalDateTime?> {

    open var userId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var moneyUsageId: Int?
        set(value): Unit = set(1, value)
        get(): Int? = get(1) as Int?

    open var userMailId: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    open var createdDatetime: LocalDateTime?
        set(value): Unit = set(3, value)
        get(): LocalDateTime? = get(3) as LocalDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record2<Int?, Int?> = super.key() as Record2<Int?, Int?>

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row4<Int?, Int?, Int?, LocalDateTime?> = super.fieldsRow() as Row4<Int?, Int?, Int?, LocalDateTime?>
    override fun valuesRow(): Row4<Int?, Int?, Int?, LocalDateTime?> = super.valuesRow() as Row4<Int?, Int?, Int?, LocalDateTime?>
    override fun field1(): Field<Int?> = JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION.USER_ID
    override fun field2(): Field<Int?> = JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION.MONEY_USAGE_ID
    override fun field3(): Field<Int?> = JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION.USER_MAIL_ID
    override fun field4(): Field<LocalDateTime?> = JMoneyUsagesMailsRelation.MONEY_USAGES_MAILS_RELATION.CREATED_DATETIME
    override fun component1(): Int? = userId
    override fun component2(): Int? = moneyUsageId
    override fun component3(): Int? = userMailId
    override fun component4(): LocalDateTime? = createdDatetime
    override fun value1(): Int? = userId
    override fun value2(): Int? = moneyUsageId
    override fun value3(): Int? = userMailId
    override fun value4(): LocalDateTime? = createdDatetime

    override fun value1(value: Int?): JMoneyUsagesMailsRelationRecord {
        set(0, value)
        return this
    }

    override fun value2(value: Int?): JMoneyUsagesMailsRelationRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): JMoneyUsagesMailsRelationRecord {
        set(2, value)
        return this
    }

    override fun value4(value: LocalDateTime?): JMoneyUsagesMailsRelationRecord {
        set(3, value)
        return this
    }

    override fun values(value1: Int?, value2: Int?, value3: Int?, value4: LocalDateTime?): JMoneyUsagesMailsRelationRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        return this
    }

    /**
     * Create a detached, initialised JMoneyUsagesMailsRelationRecord
     */
    constructor(userId: Int? = null, moneyUsageId: Int? = null, userMailId: Int? = null, createdDatetime: LocalDateTime? = null): this() {
        this.userId = userId
        this.moneyUsageId = moneyUsageId
        this.userMailId = userMailId
        this.createdDatetime = createdDatetime
        resetChangedOnNotNull()
    }
}
