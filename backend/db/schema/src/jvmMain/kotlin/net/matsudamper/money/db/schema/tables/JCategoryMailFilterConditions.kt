/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables


import java.time.LocalDateTime
import java.util.function.Function

import kotlin.collections.List

import net.matsudamper.money.db.schema.JMoney
import net.matsudamper.money.db.schema.indexes.CATEGORY_MAIL_FILTER_CONDITIONS_USER_CATEGORY_MAIL_FILTER_CONDITION_GROUP_ID
import net.matsudamper.money.db.schema.indexes.CATEGORY_MAIL_FILTER_CONDITIONS_USER_CATEGORY_MAIL_FILTER_CONDITION_ID
import net.matsudamper.money.db.schema.keys.KEY_CATEGORY_MAIL_FILTER_CONDITIONS_PRIMARY
import net.matsudamper.money.db.schema.tables.records.JCategoryMailFilterConditionsRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Index
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JCategoryMailFilterConditions(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JCategoryMailFilterConditionsRecord>?,
    aliased: Table<JCategoryMailFilterConditionsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JCategoryMailFilterConditionsRecord>(
    alias,
    JMoney.MONEY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>money.category_mail_filter_conditions</code>
         */
        val CATEGORY_MAIL_FILTER_CONDITIONS: JCategoryMailFilterConditions = JCategoryMailFilterConditions()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JCategoryMailFilterConditionsRecord> = JCategoryMailFilterConditionsRecord::class.java

    /**
     * The column
     * <code>money.category_mail_filter_conditions.category_mail_filter_condition_id</code>.
     */
    val CATEGORY_MAIL_FILTER_CONDITION_ID: TableField<JCategoryMailFilterConditionsRecord, Int?> = createField(DSL.name("category_mail_filter_condition_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_conditions.category_mail_filter_condition_group_id</code>.
     */
    val CATEGORY_MAIL_FILTER_CONDITION_GROUP_ID: TableField<JCategoryMailFilterConditionsRecord, Int?> = createField(DSL.name("category_mail_filter_condition_group_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>money.category_mail_filter_conditions.user_id</code>.
     */
    val USER_ID: TableField<JCategoryMailFilterConditionsRecord, Int?> = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>money.category_mail_filter_conditions.text</code>.
     */
    val TEXT: TableField<JCategoryMailFilterConditionsRecord, String?> = createField(DSL.name("text"), SQLDataType.VARCHAR(500).nullable(false), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_conditions.category_mail_filter_datasource_type_id</code>.
     */
    val CATEGORY_MAIL_FILTER_DATASOURCE_TYPE_ID: TableField<JCategoryMailFilterConditionsRecord, Int?> = createField(DSL.name("category_mail_filter_datasource_type_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_conditions.category_mail_filter_condition_type_id</code>.
     */
    val CATEGORY_MAIL_FILTER_CONDITION_TYPE_ID: TableField<JCategoryMailFilterConditionsRecord, Int?> = createField(DSL.name("category_mail_filter_condition_type_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_conditions.created_datetime</code>.
     */
    val CREATED_DATETIME: TableField<JCategoryMailFilterConditionsRecord, LocalDateTime?> = createField(DSL.name("created_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_conditions.update_datetime</code>.
     */
    val UPDATE_DATETIME: TableField<JCategoryMailFilterConditionsRecord, LocalDateTime?> = createField(DSL.name("update_datetime"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field(DSL.raw("current_timestamp()"), SQLDataType.LOCALDATETIME)), this, "")

    private constructor(alias: Name, aliased: Table<JCategoryMailFilterConditionsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JCategoryMailFilterConditionsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>money.category_mail_filter_conditions</code>
     * table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>money.category_mail_filter_conditions</code>
     * table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>money.category_mail_filter_conditions</code> table
     * reference
     */
    constructor(): this(DSL.name("category_mail_filter_conditions"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JCategoryMailFilterConditionsRecord>): this(Internal.createPathAlias(child, key), child, key, CATEGORY_MAIL_FILTER_CONDITIONS, null)
    override fun getSchema(): Schema? = if (aliased()) null else JMoney.MONEY
    override fun getIndexes(): List<Index> = listOf(CATEGORY_MAIL_FILTER_CONDITIONS_USER_CATEGORY_MAIL_FILTER_CONDITION_GROUP_ID, CATEGORY_MAIL_FILTER_CONDITIONS_USER_CATEGORY_MAIL_FILTER_CONDITION_ID)
    override fun getIdentity(): Identity<JCategoryMailFilterConditionsRecord, Int?> = super.getIdentity() as Identity<JCategoryMailFilterConditionsRecord, Int?>
    override fun getPrimaryKey(): UniqueKey<JCategoryMailFilterConditionsRecord> = KEY_CATEGORY_MAIL_FILTER_CONDITIONS_PRIMARY
    override fun `as`(alias: String): JCategoryMailFilterConditions = JCategoryMailFilterConditions(DSL.name(alias), this)
    override fun `as`(alias: Name): JCategoryMailFilterConditions = JCategoryMailFilterConditions(alias, this)
    override fun `as`(alias: Table<*>): JCategoryMailFilterConditions = JCategoryMailFilterConditions(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JCategoryMailFilterConditions = JCategoryMailFilterConditions(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JCategoryMailFilterConditions = JCategoryMailFilterConditions(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JCategoryMailFilterConditions = JCategoryMailFilterConditions(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Int?, Int?, Int?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?> = super.fieldsRow() as Row8<Int?, Int?, Int?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, Int?, Int?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, Int?, Int?, String?, Int?, Int?, LocalDateTime?, LocalDateTime?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
