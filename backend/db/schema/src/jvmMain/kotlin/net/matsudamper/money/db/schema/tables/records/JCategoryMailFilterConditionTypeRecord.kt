/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables.records


import net.matsudamper.money.db.schema.tables.JCategoryMailFilterConditionType

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JCategoryMailFilterConditionTypeRecord() : UpdatableRecordImpl<JCategoryMailFilterConditionTypeRecord>(JCategoryMailFilterConditionType.CATEGORY_MAIL_FILTER_CONDITION_TYPE), Record3<Int?, String?, Int?> {

    open var categoryMailFilterConditionTypeId: Int?
        set(value): Unit = set(0, value)
        get(): Int? = get(0) as Int?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var orderNumber: Int?
        set(value): Unit = set(2, value)
        get(): Int? = get(2) as Int?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Int?> = super.key() as Record1<Int?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Int?, String?, Int?> = super.fieldsRow() as Row3<Int?, String?, Int?>
    override fun valuesRow(): Row3<Int?, String?, Int?> = super.valuesRow() as Row3<Int?, String?, Int?>
    override fun field1(): Field<Int?> = JCategoryMailFilterConditionType.CATEGORY_MAIL_FILTER_CONDITION_TYPE.CATEGORY_MAIL_FILTER_CONDITION_TYPE_ID
    override fun field2(): Field<String?> = JCategoryMailFilterConditionType.CATEGORY_MAIL_FILTER_CONDITION_TYPE.NAME
    override fun field3(): Field<Int?> = JCategoryMailFilterConditionType.CATEGORY_MAIL_FILTER_CONDITION_TYPE.ORDER_NUMBER
    override fun component1(): Int? = categoryMailFilterConditionTypeId
    override fun component2(): String? = name
    override fun component3(): Int? = orderNumber
    override fun value1(): Int? = categoryMailFilterConditionTypeId
    override fun value2(): String? = name
    override fun value3(): Int? = orderNumber

    override fun value1(value: Int?): JCategoryMailFilterConditionTypeRecord {
        set(0, value)
        return this
    }

    override fun value2(value: String?): JCategoryMailFilterConditionTypeRecord {
        set(1, value)
        return this
    }

    override fun value3(value: Int?): JCategoryMailFilterConditionTypeRecord {
        set(2, value)
        return this
    }

    override fun values(value1: Int?, value2: String?, value3: Int?): JCategoryMailFilterConditionTypeRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised JCategoryMailFilterConditionTypeRecord
     */
    constructor(categoryMailFilterConditionTypeId: Int? = null, name: String? = null, orderNumber: Int? = null): this() {
        this.categoryMailFilterConditionTypeId = categoryMailFilterConditionTypeId
        this.name = name
        this.orderNumber = orderNumber
        resetChangedOnNotNull()
    }
}
