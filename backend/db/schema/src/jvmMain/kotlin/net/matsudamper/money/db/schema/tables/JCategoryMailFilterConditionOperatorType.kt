/*
 * This file is generated by jOOQ.
 */
package net.matsudamper.money.db.schema.tables


import java.util.function.Function

import net.matsudamper.money.db.schema.JMoney
import net.matsudamper.money.db.schema.keys.KEY_CATEGORY_MAIL_FILTER_CONDITION_OPERATOR_TYPE_PRIMARY
import net.matsudamper.money.db.schema.tables.records.JCategoryMailFilterConditionOperatorTypeRecord

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class JCategoryMailFilterConditionOperatorType(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, JCategoryMailFilterConditionOperatorTypeRecord>?,
    aliased: Table<JCategoryMailFilterConditionOperatorTypeRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<JCategoryMailFilterConditionOperatorTypeRecord>(
    alias,
    JMoney.MONEY,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of
         * <code>money.category_mail_filter_condition_operator_type</code>
         */
        val CATEGORY_MAIL_FILTER_CONDITION_OPERATOR_TYPE: JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<JCategoryMailFilterConditionOperatorTypeRecord> = JCategoryMailFilterConditionOperatorTypeRecord::class.java

    /**
     * The column
     * <code>money.category_mail_filter_condition_operator_type.category_mail_filter_condition_operator_type_id</code>.
     */
    val CATEGORY_MAIL_FILTER_CONDITION_OPERATOR_TYPE_ID: TableField<JCategoryMailFilterConditionOperatorTypeRecord, Int?> = createField(DSL.name("category_mail_filter_condition_operator_type_id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column
     * <code>money.category_mail_filter_condition_operator_type.operator_name</code>.
     */
    val OPERATOR_NAME: TableField<JCategoryMailFilterConditionOperatorTypeRecord, String?> = createField(DSL.name("operator_name"), SQLDataType.VARCHAR(10).nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<JCategoryMailFilterConditionOperatorTypeRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<JCategoryMailFilterConditionOperatorTypeRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased
     * <code>money.category_mail_filter_condition_operator_type</code> table
     * reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased
     * <code>money.category_mail_filter_condition_operator_type</code> table
     * reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>money.category_mail_filter_condition_operator_type</code>
     * table reference
     */
    constructor(): this(DSL.name("category_mail_filter_condition_operator_type"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, JCategoryMailFilterConditionOperatorTypeRecord>): this(Internal.createPathAlias(child, key), child, key, CATEGORY_MAIL_FILTER_CONDITION_OPERATOR_TYPE, null)
    override fun getSchema(): Schema? = if (aliased()) null else JMoney.MONEY
    override fun getPrimaryKey(): UniqueKey<JCategoryMailFilterConditionOperatorTypeRecord> = KEY_CATEGORY_MAIL_FILTER_CONDITION_OPERATOR_TYPE_PRIMARY
    override fun `as`(alias: String): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(DSL.name(alias), this)
    override fun `as`(alias: Name): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(alias, this)
    override fun `as`(alias: Table<*>): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): JCategoryMailFilterConditionOperatorType = JCategoryMailFilterConditionOperatorType(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Int?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Int?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}
